// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Simple.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace packet.simple {

  /// <summary>Holder for reflection information generated from Simple.proto</summary>
  public static partial class SimpleReflection {

    #region Descriptor
    /// <summary>File descriptor for Simple.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SimpleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxTaW1wbGUucHJvdG8iGwoHU2ltcGxlMRIQCghlY2hvVGltZRgBIAEoAyIb",
            "CgdTaW1wbGUyEhAKCGVjaG9UaW1lGAEgASgDQi0KDXBhY2tldC5zaW1wbGVC",
            "DFNpbXBsZVdhcHBlcqoCDXBhY2tldC5zaW1wbGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::packet.simple.Simple1), global::packet.simple.Simple1.Parser, new[]{ "EchoTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::packet.simple.Simple2), global::packet.simple.Simple2.Parser, new[]{ "EchoTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Simple1 : pb::IMessage<Simple1> {
    private static readonly pb::MessageParser<Simple1> _parser = new pb::MessageParser<Simple1>(() => new Simple1());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Simple1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::packet.simple.SimpleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Simple1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Simple1(Simple1 other) : this() {
      echoTime_ = other.echoTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Simple1 Clone() {
      return new Simple1(this);
    }

    /// <summary>Field number for the "echoTime" field.</summary>
    public const int EchoTimeFieldNumber = 1;
    private long echoTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EchoTime {
      get { return echoTime_; }
      set {
        echoTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Simple1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Simple1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EchoTime != other.EchoTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EchoTime != 0L) hash ^= EchoTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EchoTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EchoTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EchoTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EchoTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Simple1 other) {
      if (other == null) {
        return;
      }
      if (other.EchoTime != 0L) {
        EchoTime = other.EchoTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EchoTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Simple2 : pb::IMessage<Simple2> {
    private static readonly pb::MessageParser<Simple2> _parser = new pb::MessageParser<Simple2>(() => new Simple2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Simple2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::packet.simple.SimpleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Simple2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Simple2(Simple2 other) : this() {
      echoTime_ = other.echoTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Simple2 Clone() {
      return new Simple2(this);
    }

    /// <summary>Field number for the "echoTime" field.</summary>
    public const int EchoTimeFieldNumber = 1;
    private long echoTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EchoTime {
      get { return echoTime_; }
      set {
        echoTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Simple2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Simple2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EchoTime != other.EchoTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EchoTime != 0L) hash ^= EchoTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EchoTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EchoTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EchoTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EchoTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Simple2 other) {
      if (other == null) {
        return;
      }
      if (other.EchoTime != 0L) {
        EchoTime = other.EchoTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EchoTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
